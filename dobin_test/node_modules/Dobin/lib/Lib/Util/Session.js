var co = require("co");


var Session = function () {
}
Session.prototype = {
	init : function *(http) {
		var conf = $.Config("session");
		//如果配置为空表示不支持Session
		if($.isEmpty(conf))return new Error("Please check your session config.");
		
		if(http.session)
			return http.session;
		this.uid = http.cookie[conf.key];
		//如果没有则生成uid
		if( !this.uid ){
			this.uid = $.guid(32);
			http.setCookie(conf.key, this.uid, conf.cookie);
		}

		this.data={}
		//建立Session存储
		var store = Session_store[conf.storeType + "Session" ];
		self = this;
		Object.keys(store).forEach(function(key){
			self[key] = store[key];
		});
		yield this.initData();
		http.session = this;
		http.on('res_after_end', function(){
			co(function *() {
				//刷新session
				var re = yield self.flush();
				return re;
			}).catch(function (e){
				console.log(e);
			});
			
		});
		return this;
	}
};

module.exports = Session;

//用于不同存储实现自己的接口。
var Session_store = {}

Session_store.redisSession = {
	initData :function *() {
		var Redis = new (require($.DOBIN_PATH+"/Lib/Util/Redis.js"))();
		//检查有没有hash表
		if ( !(yield Redis.exists(this.uid)) ){
			yield Redis.hmset(this.uid,{});
			yield Redis.expire(this.uid,this.timeout);
		}
		this.data = yield Redis.hgetall(this.uid);
		yield Redis.quit();
	},
	set : function *(name,value) {
		if ( this.data === undefined ) yield this.initData()
		this.data[name] = value;
	},
	rm : function () {
		delete this.data[name];
	},
	get : function (key) {
		return this.data[key]
	},
	flush : function *() {
		var Redis = new (require($.DOBIN_PATH+"/Lib/Util/Redis.js"))();
		var res = yield Redis.hmset(this.uid,this.data);
		return yield Redis.quit();
	}
}

Session_store.fileSession = {
	initData :function () {
		
	},
	set : function () {
		
	},
	rm : function () {
		
	},
	get : function () {
		
	},
	flush :function () {
	}
}