var thunkify = require("thunkify-wrap"),
	EventEmitter = require('events').EventEmitter;
	redis = require("redis")
	;

var API_FUNCTIONS = ['end', 'unref'];

var Redis = function ( opt ) {
	var options = $.extend($.Config("redis"),opt),
		client = redis.createClient(options)
		;
	return wrapper(client);
}

function wrapper(client) {
  var wrap = {};
  
  wrap.multi = function () {
    var multi = client.multi();
    multi.exec = thunkify(multi.exec,client);
    return multi;
  };
  
  wrap.pipeline = function(){
    var pipeline = client.pipeline();
    pipeline.exec = thunkify(pipeline.exec,client);
    return pipeline;
  };
  
  Object.keys(client).forEach(function (key) {
    wrap[key] = client[key];
  });
  
  Object.keys(EventEmitter.prototype).forEach(function (key) {
    if (typeof client[key] != 'function') return;
    wrap[key] = client[key].bind(client);
  });
  
  Object.defineProperty(wrap, 'connected', {
    get: function () { return client.connected }
  });
  
  Object.defineProperty(wrap, 'retry_delay', {
    get: function () { return client.retry_delay }
  });
  
  Object.defineProperty(wrap, 'retry_backoff', {
    get: function () { return client.retry_backoff }
  });

  Object.keys(Object.getPrototypeOf(client)).forEach(function (key) {
    var protoFunction = client[key].bind(client);
    var isCommand = API_FUNCTIONS.indexOf(key) === -1;
    var isMulti = key == 'multi';
    var isPipeline = key == 'pipeline';
    if (isMulti) return;
    if (isPipeline) return;
    if (isCommand) {
      protoFunction = thunkify(protoFunction,client);
    }
    wrap[key] = protoFunction;
  });
  return wrap;
};


module.exports = Redis;


$.redis = function *( name, value, options ) {
	if (!name) return null;
	//支持Object设值
	if ($.isObject(name)){
		var effcount = {};
		for (var key in name )
			effcount[key] = yield $.redis(key,name[key]);
		return effcount;
	}
	if(!$.isString(name)) return;
	var Redis = new (require($.DOBIN_PATH+"/Lib/Util/Redis.js"))( options );
	if( value === undefined ){
		//返回值
		var res = yield Redis.get(name);
    Redis.quit();
    return res;

	}
	if ( value === null ){
		//清除键值
		var res = yield Redis.del(name);
    Redis.quit();
    return res;
	}
	else{
		console.log(value);
		//设置值
		var res = yield Redis.set(name,value);
    Redis.quit();
    return res;
	}
}