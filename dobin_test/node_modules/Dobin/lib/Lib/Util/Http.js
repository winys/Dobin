//Http.js 是加强版的 http 模块
var http = require('http'),
	url = require('url'),
	fs = require('fs'),
	EventEmitter = require('events').EventEmitter,
	locaclhost = "127.0.0.1"
	;


module.exports = {
	run : function  ( callback, context ) {
		var self = this;
		this.server = 
			http.createServer(function(req, res){
				$.events.emit("req_init");
				self._initServer(req,res,callback,context)
			}).
			listen($.Config("port"),$.Config("host") || locaclhost);
			console.log("Server run on " + $.Config("host") + ":" + $.Config("port"));
	},

	_initServer : function ( req, res, callback, context ) {
		this.req = req;
		this.res = res;

		//这次请求的http,雏形为事件
		this.http = new EventEmitter();
		this.http.startTime = Date.now();

		this._req();
		this._res();

		//判断是否为POST 解析报文
		if (['POST', 'PUT', 'PATCH'].indexOf(this.req.method) > -1) {
			this.getPostData( callback );
			return;
		}
		//类型为GET 直接回调
		callback.call( context, this.http );
	},
	
    //检测是否含有post数据    
    hasPostData: function(){
      if ('transfer-encoding' in this.req.headers) {
        return true;
      }
      var contentLength = this.req.headers['content-length'] | 0;
      return contentLength > 0;
    },

	getPostData : function ( callback ) {
		//检查是否具有POST数据
		if( !this.hasPostData() ){
			callback.call(this);
			return;
		}

		//上传的数据中是否含有文件的检测正则
	    var multiReg = /^multipart\/(form-data|related);\s*boundary=(?:"([^"]+)"|([^;]+))$/i;

	    switch( true ){
	    	//判断文件上传
	    	case multiReg.test(this.req.headers['content-type']):
	    		this._filePost();
	    		break;
	    	//判断ajax上传
	    	case this.req.headers[$.Config('post_ajax_filename_header')]:
	    		this._ajaxFilePost();
	    		break;
	    	//普通POST
	    	default:
	    		this._commonPost();
	    }

	    callback.call(this, callback.call( this,this.http ) );
	},

	//过滤参数，目的是为了让每个键对应一个值而不是一个数组
	filterQuery : function (data) {
		if( !$.Config("filter_data") ){
			return data;
		}
		if( $.isArray( data ) ){
			return data[0];
		}
		else if( isObject(data) ){
			var ret = {};
			for ( var key in data ){
				if ( isArray(data[key]) ){
					ret[key] = data[key][0];
				}
				else {
					ret[key] = data[key];
				}
			}
			return ret;
		}
		return data;
	},

	//普通POST
	_commonPost : function () {
		var self = this;
			buffers = [],
			length = 0
			;

		//收集数据
		this.req.on('data',function ( chunk ){
			buffers.push(chunk);
			length += chunk.length;
		});

		//结束后处理数据
		this.on('end',function () {
			self.http.payload = Buffer.concat(buffers).toString();

			//解析表单
			if (isEmpty(self.http.post) && self.http.payload) {
	            self.http.post = self.filterQuery(querystring.parse(self.http.payload));
			}

			var post = self.http.post,
				length = Object.keys(post).length
				;
			//最大表单数超过限制
			if (length > $.Config('post_max_fields')) {
				self.res.statusCode = 413;
				self.res.end();
				return;
			}
			//检查单个表单值长度超过限制
			for(var name in post){				
				if (post[name].length > $.Config('post_max_fields_size')) {
					self.res.statusCode = 413;
					self.res.end();
					return;
				}
			}
		});
	},

	//文件上传
	_filePost : function () {
	},

	//ajax上传文件
	_ajaxFilePost : function () {
	},

	//加强req功能
	_req : function () {
		var req = {
			//HTTP 版本号
			version: this.req.httpVersion,
			//请求方法
			method: this.req.method,
			//请求头
	  		headers: this.req.headers,
	  		//请求的Content-Type
	  		contentType: (this.req.headers['content-type'] || '').split(';')[0].trim(),
	  		//post信息
	        post: {},
	        //上传的文件信息
	       file: {},
	        //请求的cookie
	        cookie: $.deCookie(this.req.headers.cookie || '')
		};
		//获取头部字段
		req.getHeader = function (name) {
			return this.headers[name||''];
		}
		//获取IP地址
		req.ip = function () {
			var connection = this.req.connection;
			var socket = this.req.socket;
			if (connection && connection.remoteAddress !== locaclhost) {
				return connection.remoteAddress;
			}else if (socket && socket.remoteAddress !== locaclhost) {
				return socket.remoteAddress;
			}
			return this.headers['x-forwarded-for'] || this.headers['x-real-ip'] || locaclhost;
		}

		$.extend(this.http, req);

		//解析url中的参数
		var urlInfo = url.parse('//' + req.headers.host + this.req.url, true, true);
		this.http.pathname = urlInfo.pathname;
		//query只记录?后面的参数
		this.http.query = this.filterQuery(urlInfo.query);
		//get包含路由解析追加的参数
		this.http.get = $.extend({}, urlInfo.query);
		//主机名，带端口
		this.http.host = urlInfo.host;
		//主机名，不带端口
		this.http.hostname = urlInfo.hostname;
		//将原生的request对象放在http上，方便后续在controller等地方使用
		this.http.req = this.req;
	},

	//加强res功能
	_res : function () {
		var res = {
			//Cookie队列 在res.end()时会写入到Set-Cookie中
			_cookie: {},
			//设置Header
			header : function ( name, value ) {
				if (!this.res.headersSent) {
					this.res.setHeader(name, value);
				}
			},
			//设置Cookie
			setCookie : function ( name, value, options ) {
				if ( !name )
					return this._cookie;
				options = options || {};

				//options 为数字表示超时时间
				if (typeof options === 'number') {
					options = {timeout: options};
				}
				var timeout = options.timeout;
				if (timeout === undefined) {
					timeout = $.Config('cookie_timeout');
				}
				//如果 value 为 null 移除该Cookie
				if (value === null) {
					timeout = -1000;
				}

				//构建Cookie单元				
				var defaultOptions = {
					path: $.Config('cookie_path'),
					domain: $.Config('cookie_domain'),
					expires: new Date (Date.now() + timeout * 1000)
				};

				if ( timeout == 0 ){
					delete defaultOptions.expires;
				}
				for( var key in options ){
					defaultOptions[key.toLowerCase()] = options[key];
				}
				defaultOptions.name = name;
				defaultOptions.value = value;

				//设置Cookie
				this._cookie[ name ] = defaultOptions;
			},
			//将队列中的cookie发送出去
			sendCookie: function(){
				var values = [];
				for(var key in this._cookie){
					if (this._cookie.hasOwnProperty(key)) {
						values.push(this._cookie[key])
					}
				}
				var cookies = values.map(function(item){
					return $.enCookie(item.name, item.value, item);
				});
				if (cookies.length) {
					this.header('Set-Cookie', cookies);
					this._cookie = {};
				}
			},
			//302跳转
			redirect : function ( url ) {
				this.req.statusCode = "302";
				this.setHeader('Location', url || '/');
				this.end();
			},
			//发送错误
			error : function ( code,message ) {
				if (typeof code != "number"){
					message = code;
					code = 500;
				}
				this.res.statusCode = code || 500;
				this.echo( message );
				this.end();
			},
			//输出到响应报文中
			echo : function ( obj, encoding ) {
				this.sendCookie();
				//格式化obj
				if ( obj === undefined ){
					return;
				}
				if( $.isArray(obj) || $.isObject(obj) ){
					obj = JSON.stringify(obj);
				}
				if (!$.isString(obj) && !$.isBuffer(obj)) {
					obj += '';
				}

				//输出
				if ($.isBuffer(obj)) {
					this.res.write(obj);
				}else{
					this.res.write(obj, encoding || $.Config('encoding'));
				}
				return obj;
			},
			//结束请求
			end : function () {				
				//触发事件
				this.emit('res_before_end', this);
				//设置cookie
				this.sendCookie();
				//结束res
				this.res.end();
				//触发结束事件
				this.emit('res_after_end', this);

				//清除上传的缓存文件
				if ($.Config('post_file_autoremove') && !isEmpty(this.file)) {
					var key, path;
					for(key in this.file){
						path = this.file[key].path;
						if ($.isFile(path)) {
							fs.unlink(path, function(){});
						}
					}
				}
			}
		}
		$.extend( this.http,res );
		//将原生的response对象放在http上，方便后续controller等地方使用
		this.http.res = this.res;
	}

}