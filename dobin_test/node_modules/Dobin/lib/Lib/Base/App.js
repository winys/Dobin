//App.js 用于初始化应用，设置应用参数等
var fs = require("fs"),
	Dispacher = require($.DOBIN_PATH+"/Lib/Base/Dispatcher.js"),
	Http  = require($.DOBIN_PATH+"/Lib/Util/Http.js"),
	BaseController =  require($.DOBIN_PATH+"/Lib/Base/Controller.js"),
	mime = require("mime")
	;

module.exports = {
	run : function () {
		this.init();

		//启动应用
		this.createServer();

		//触发事件
		$.events.emit('app_init');
                                                                                                                                                                                                                                                                                                           
		//写入日志
		$.server_log('App start at' + new Date());
	},

	init : function () {
		
	},

	//构建应用Http服务器
	createServer : function () {
		//检查配置项
		var cluster_mod = $.Config('cluster_mod'),
			cluster = require('cluster')
			;

		//开启多进程
		if( cluster_mod && !cluster.isMaster){
			
		}
		else{
			//启动服务器
			Http.run(this.exec,this);
		}
	},

	//检查并获取Controller
	getController : function(http) {
		var group = http.group,
			controller = http.controller,
			route = "/" + group + "/Controller/" + controller + ".js"
			;
		if ( !controller )
			return new Error("Can't find controller with `undefined`");
		if ( !fs.existsSync($.APP_PATH + route))
			return new Error("Can't find controller with `"+controller+"`");
		//存在则返回Controller
		return require($.APP_PATH + route);
	},
	//获取Action形参
	getParams : function ( fn, http ) {
		var commentReg = /((\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s))/mg,
			parsReg = /^function\s*[^\(]*\(\s*([^\)]*)\)/m,
			tempfn = fn.toString.call(fn).replace( commentReg,'' ),
			paramskeys = tempfn.match( parsReg )[1]
			;
		if ( !paramskeys ) return [];
		paramskeys = paramskeys.split(/\s*,\s*/);

		return paramskeys.map(function (item) {
			return http.get[item] || http.post[item];
		});

	},

	execAtion : function ( controller, actionFn, data ) {
		$.events.emit("before-action");
		actionFn.apply( controller, data );
		$.events.emit("after-action");
	},

	exec : function ( http ) {
		//路由解析获得Action
		Dispacher.init(http).run();

		//检查是否为静态资源请求
		if( http.isResource ){
			var file = $.RESOURCE_PATH + http.pathname;
			console.log(file);
			if (fs.existsSync(file)) {
				var contentType = mime.lookup(file),
					fileStream = fs.createReadStream(file)
					;
				res.setHeader('Content-Type', contentType + '; charset=' + $.Config('encoding'));
				fileStream.pipe(http.res);
				fileStream.on('end', function(){
					http.end();
				});
			}else{
				http.error( 404, "Don`t find the item by URL `" + http.pathname + "`.");
			}
		}
		else{
			var controller = this.getController( http );

			//检查Controller是否存在
			if ( controller instanceof Error ){
				$.server_log(controller.toString());
				http.error("没有找到Controller `" + http.controller + "`,请检查您的路径");
				return;
			}

			var actionFn = controller[http.action];
			if ( !actionFn || !$.isFunction(actionFn)){
				$.server_log( "Can't find Action with `"+http.action+"`");
				http.error("没有找到Action `" + http.action + "`,请检查您的路径");
				return;
			}

			//获取Action参数
			var data = this.getParams( actionFn, http ) ;

			BaseController.init(http);
			this.execAtion( controller, actionFn, data);
		}
		
	}


}