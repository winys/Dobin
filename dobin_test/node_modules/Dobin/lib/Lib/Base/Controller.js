//controller.js 实现Contoller方法，可以用于创建一个新的Controller

//未完成的任务
//1. session
//2. jsonp
//3. websocket


var url = require('url');

module.exports = {
	/**
     * 初始化执行方法
     * @param  {[type]} http [description]
     * @return {[type]}      [description]
     */
	init = function ( http ) {
		this.http = http;
	},
	/**
     * 获取客户端的ip
     * @return {[type]} [description]
     */
	ip : function () {
		return this.http.ip();
	}
	/**
     * 是否是GET请求
     * @return {Boolean} [description]
     */
	isGet : function () {
		return this.http.method === "GET";
	},
	/**
     * 是否是POST请求
     * @return {Boolean} [description]
     */
    isPost : function () {
		return this.http.method === "POST";
	},
	/**
     * 是否是特定METHOD请求
     * @param  {[type]}  method [description]
     * @return {Boolean}        [description]
     */
	isMethod : function ( name ) {
		return this.http.method === name.toUpperCase();
	},
	/**
     * 是否是AJAX请求
     * @return {Boolean} [description]
     */
	isAjax: function(method) {
		//请求类型判断
		if (method && this.http.method !== method.toUpperCase()) {
			return false;
		}
		return this.header('x-requested-with') === 'XMLHttpRequest';
	},
	/**
     * 获取QUERY参数
     * @param  {[type]} name [description]
     * @return {[type]}      [description]
     */
	get : function ( name ) {
		return name ? this.http.get[name] : this.http.get;
	},
	/**
	* 获取POST参数
	* @param  {[type]} name [description]
	* @return {[type]}      [description]
	*/
	post : function ( name ) {
		return name ? this.http.post[name] : this.http.post;
	},
	/**
	 * 获取参数
	 * @param  {[type]} name [description]
	 * @return {[type]}      [description]
	 */
	param: function(name) {
		if (name === undefined) {
			var post = this.post();
			return !$.isEmpty (post) ? post : this.get();
		}
		return this.post(name) || this.get(name);
	},
	/**
	 * 获取上传的文件
	 * @param  {[type]} name [description]
	 * @return {[type]}      [description]
	 */
	file: function(name) {
		var http = this.http;
		return name ? (http.file[name] || {}) : http.file;
	},
	/**
	 * header操作
	 * @param  {[type]} name  [description]
	 * @param  {[type]} value [description]
	 * @return {[type]}       [description]
	 */
	header: function(name, value) {
		if (name === undefined) {
			return this.http.headers;
		}
		else if ( $.isObject(name) ) {
			for ( var key in name ) {
				this.header(key, name[key]);
			}
			return this;
		}
		else if (value !== undefined) {
			if ( name === 'Content-Type' ) {
				return this.type(value);
			}
			this.http.setHeader(name, value);
			return this;
		}else{
			return this.http.getHeader(name);
		}
	},
	/**
	* 获取userAgent
	* @return {[type]} [description]
	*/
	userAgent: function(){
		return this.http.headers['user-agent'] || '';
	},
	/**
	 * 获取referer
	 * @return {[type]} [description]
	 */
	referer: function(host){
		var referer = this.http.headers.referer || this.http.headers.referrer || '';
		if (!referer || !host) {
			return referer;
		}
		var info = url.parse(referer);
		return info.hostname;
	},
	/**
	 * 设置http响应状态码
	 * @param  {[type]} status [description]
	 * @return {[type]}        [description]
	 */
	status: function(status) {
		var res = this.http.res;
		if (!res.headersSent) {
			res.statusCode = status || 404;
		}
		return this;
	},
	/**
	 * 阻止访问
	 * @param  {[type]} status [description]
	 * @return {[type]}        [description]
	 */
	deny: function(status){
		var res = this.http.res;
		if (!res.headersSent) {
			res.statusCode = status || 403;
			this.http.end();
		}
		return this;
	},
	/**
     * 输出内容
     * 自动JSON.stringify
     * 自定将数字等转化为字符串
     * @param  {[type]} obj [description]
     * @return {[type]}     [description]
     * 临时函数， 以后会被替换
     */
	echo: function(obj, encoding) {
		return this.http.echo(obj, encoding);
	},
	/**
	 * 结束输出，输出完成时一定要调用这个方法
	 * @param  {[type]} obj [description]
	 * @return {[type]}     [description]
	 */
	end: function(obj, encoding) {
		return this.http.end();
	},
	/**
	 * 发送Content-Type
	 * @param  {[type]} type [description]
	 * @return {[type]}      [description]
	 */
	type: function(ext){
		if (this.http.cthIsSend || !ext) {
			return;
		}
		if (ext.indexOf('/') === -1) {
			ext = require('mime').lookup(ext);
		}
		if (ext.toLowerCase().indexOf('charset=') === -1) {
			ext += '; charset=' + $.Config('encoding');
		}
		//Content-Type Header has been Send
		this.http.cthIsSend = true;
		this.http.setHeader('Content-Type', ext);
		return this;
	},
	/**
	 * 下载文件
	 * @return Promise [description]
	 */
	download: function(file, contentType, filename) {
		if (isString(contentType) && contentType.indexOf('.') > -1) {
			filename = contentType;
			contentType = '';
		}
		if (!contentType || contentType.indexOf('/') === -1) {
			contentType = require('mime').lookup(contentType || file);
		}
		var http = this.http;
		var fileStream = fs.createReadStream(file);
		var deferred = getDefer();
		this.type(contentType);
		http.setHeader('Content-Disposition', 'attachment; filename="' + (filename || path.basename(file)) + '"');
		fileStream.pipe(http.res);
		fileStream.on('end', function() {
			http.end();
		});
		fileStream.on('error', function(err) {
			$.app_log("文件下载失败 [" + filename + "]");
		});
		return this;
	},
	/**
	 * 发送执行时间
	 * @param  {[type]} name [description]
	 * @return {[type]}      [description]
	 */
	sendTime: function(name){
		return this.http.sendTime(name);
	},
	/**
	 * cookie操作
	 * @param  {[type]} name    [description]
	 * @param  {[type]} value   [description]
	 * @param  {[type]} options [description]
	 * @return {[type]}         [description]
	 */
	cookie: function(name, value, options) {
		if (value !== undefined) {
			this.http.setCookie(name, value, options);
			return this;
		}
		return name === undefined ? this.http.cookie : (this.http.cookie[name] || '');
	},
	/**
     * session
     * 如果是get操作，则返回一个promise
     * @param  {[type]} name  [description]
     * @param  {[type]} value [description]
     * @return {[type]}       [description]
     */
     //待开发

}