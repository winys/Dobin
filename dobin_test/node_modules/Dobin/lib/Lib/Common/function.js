//常用函数库

var fs = require('fs'),
	util = require('util'),
	crypto = require('crypto')
	;


//配置项的读取和写入
$._config = {};
$.Config = function (key, value) {
	if(arguments.length == 0)
		return $._config;
	if( key === null){
		$._config = {};
		return;
	}
	if( key && value ){
		$._config[key] = value;
		return;
	}
	//支持批量设置配置项
	if( typeof key == "object" ){
		for(var name in key){
			$._config[name] = key[name];
		}
		return;
	}
	return $._config[key];
}



//服务器日志
$.server_log = function (data) {
	if( !fs.existsSync($.DOBIN_PATH+"/Log") ){
		fs.mkdirSync($.DOBIN_PATH+"/Log");
	}

	if( data === null ){
		fs.writeFile($.DOBIN_PATH+"/Log/server.log",'',function (err) {
			if(err){
				console.log(err);
			}
		});
		return;
	}

	fs.appendFile($.DOBIN_PATH+"/Log/server.log",data + '\n',function (err) {
		if(err){
			console.log(err);
		}
	});
	return;
}

//应用日志(Http日志)
$.app_log = function  (data) {
	if( !fs.existsSync($.DOBIN_PATH+"/Log") ){
		fs.mkdirSync($.DOBIN_PATH+"/Log");
	}
	if( data === null ){
		fs.writeFile($.DOBIN_PATH+"/Log/app.log",'',function (err) {
			if(err){
				console.log(err);
			}
		});
	}
	fs.appendFile($.DOBIN_PATH+"/Log/app.log",data + '\n',function (err) {
		if(err){
			console.log(err);
		}
	});

}


/**
 * 是否是Buffer
 */
$.isBuffer = Buffer.isBuffer;

/**
 * 是否是Array
 */
$.isArray = Array.isArray;
/**
 * 是否是字符串
 */
$.isString = function(obj){
  return toString.call(obj) === '[object String]';
};
/**
 * 是否是Function
 */
$.isFunction = function ( fn ) {
	return toString.call(fn) == "[object Function]"
}

/**
 * 是否是Object
 */
$.isObject = function (obj) {
	if ( $.isBuffer(obj) ){
		return false;
	}
	return toString.call(obj) === '[object Object]';
}
/**
 * 是否是generator
 */
$.isGenerator = function (obj) {
  return toString.call(obj) === '[object Generator]';
}
/**
 * 是否是Date
 */
$.isDate = util.isDate;
/**
 * 是否是个文件
 */
$.isFile = function ( path ){
	if (!fs.existsSync(path)) {
		return false;
	}
	var stats = fs.statSync(p);
	return stats.isFile();
};

/**
 * 是否是个目录
 */
$.isDir = function (path ){
	if (!fs.existsSync(p)) {
		return false;
	}
	var stats = fs.statSync(p);
	return stats.isDirectory();
};

/**
 * extend 具有深度复制功能
 */
$.extend = function(){
  var args = [].slice.call(arguments);
  var deep = true;
  var target = args.shift();
  if ( typeof target == "boolean" ) {
    deep = target;
    target = args.shift();
  }
  target = target || {};
  var length = args.length;
  var options, name, src, copy, copyAsArray, clone;
  for(var i = 0; i < length; i++){
    options = args[i] || {};
    for(name in options){
      src = target[name];
      copy = options[name];
      if (src && src === copy) {
        continue;
      }
      if (deep && copy && ( $.isObject(copy) || (copyAsArray = $.isArray(copy) ))) {
        if (copyAsArray) {
          copyAsArray = false;
          clone = [];
        }else{
          clone = src && $.isObject(src) ? src : {}; 
        }
        target[name] = $.extend(deep, clone, copy);
      }else{
        target[name] = copy;
      }
    }
  }
  return target;
};
//首字母大写。
$.ucfirst = function(name) {
	name = (name || '').toString();
	return name.substr(0,1).toUpperCase() + name.substr(1).toLowerCase();
};

/**
 * 判断对象是否为空
 * @param  {[type]}  obj
 * @return {Boolean}
 */
$.isEmpty = function(obj){
	var type = toString.call(obj);

	switch (type) {
		case '[object Object]' :
			for( var key in obj ){
				return false;
			}
			return true;
		case '[object Array]' :
			return obj.length === 0;
		case '[object String]' :
			return obj.length === 0;
		case '[object Null]' :
			return true;
		case '[object Undefined]' :
			return true;
		case '[object Boolean]' :
			return !obj;
		default :
			return false;
	}
};

/**
 * 生成guid
 * @param  int length
 * @return string
 */
$.guid = function(length){
	'use strict';
	var ratio = Math.log(64) / Math.log(256);
	var numbytes = Math.ceil(length * ratio);
	var str = crypto.randomBytes(numbytes).toString('base64').slice(0, length);
	return str.replace(/\+/g, '_').replace(/\//g, '-');
};